// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === ENUMS ===
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// === MODELS ===
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  role         Role     @default(STUDENT)
  passwordHash String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  snippets Snippet[]
}

model Snippet {
  id             String    @id @default(cuid())
  title          String
  code           String
  language       String
  userId         String
  user           User      @relation(fields: [userId], references: [id])

  isPublic       Boolean   @default(false)
  tags           String[]
  deletedAt      DateTime?

  // üëá contador simple que el API incrementa en cada update
  snippetVersion Int       @default(1)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}


// prisma/schema.prisma
// --- deja tu datasource y generator como ya los tengas ---

enum Language {
  python
  java
  pseint
}

enum AttemptStatus {
  PENDING
  PASSED
  FAILED
}

model Lesson {
  id          String    @id @default(cuid())
  number      Int
  slug        String    @unique
  title       String
  description String
  content     String    @db.Text
  createdAt   DateTime  @default(now())

  challenges  Challenge[]
  progresses  UserProgress[]
}

model Challenge {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  description String
  language    Language
  starterCode String    @db.Text
  /// Tests en JSON (ej. { "type": "contains", "tokens": ["print(", "if"] })
  testsJson   String?   @db.Text

  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id])

  attempts    ChallengeAttempt[]
}

model UserProgress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean   @default(false)
  completedAt DateTime?

  // NUEVO
  progress    Int       @default(0) // 0..100
  startedAt   DateTime?
  updatedAt   DateTime  @updatedAt

  lesson      Lesson    @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}


model ChallengeAttempt {
  id          String        @id @default(cuid())
  userId      String
  challengeId String
  code        String        @db.Text
  language    Language
  status      AttemptStatus @default(PENDING)
  feedback    String?
  isCorrect   Boolean       @default(false)
  createdAt   DateTime      @default(now())

  challenge   Challenge     @relation(fields: [challengeId], references: [id])

  @@index([challengeId, userId])
}
model UserSubmission {
  id            String   @id @default(cuid())
  userId        String
  challengeSlug String
  language      String
  code          String
  passed        Boolean
  score         Int
  createdAt     DateTime @default(now())

  @@index([userId, challengeSlug])
}

// prisma/schema.prisma  (a√±ade al final)
model Unit {
  id        String   @id @default(cuid())
  slug      String   @unique
  number    Int
  title     String
  summary   String
  sections  Section[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id       String  @id @default(cuid())
  unitId   String
  unit     Unit    @relation(fields: [unitId], references: [id])
  index    Int
  title    String
  content  String
  questions Question[]

  @@unique([unitId, index], name: "unitId_index")
}


model Question {
  id          String   @id @default(cuid())
  sectionId   String
  section     Section  @relation(fields: [sectionId], references: [id])
  prompt      String
  explanation String?
  answerKey   String?    // ‚Üê opcional para poder crear primero la pregunta

  options     Option[]

  @@unique([sectionId, prompt], name: "sectionId_prompt") // ‚Üê clave compuesta
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  label      String

  @@unique([questionId, label], name: "questionId_label") // ‚Üê clave compuesta
}

model UserUnitProgress {
  id        String   @id @default(cuid())
  userId    String
  unitId    String
  currentSectionIdx Int      @default(0)
  // porcentaje 0..100 (lo recalculamos al completar secciones)
  percent   Int      @default(0)
  updatedAt DateTime @updatedAt
  @@unique([userId, unitId])
}

model UserSectionProgress {
  id         String   @id @default(cuid())
  userId     String
  sectionId  String
  completed  Boolean  @default(false)
  answersJson String? @db.Text
  updatedAt  DateTime @updatedAt
  @@unique([userId, sectionId])
}

model UserAnswer {
  id         String   @id @default(cuid())
  userId     String
  unitId     String
  sectionId  String
  questionId String
  optionId   String
  updatedAt  DateTime @updatedAt

  @@unique([userId, questionId]) // una respuesta por pregunta por usuario
}
