// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === ENUMS ===
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// === MODELS ===
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  role         Role     @default(STUDENT)
  passwordHash String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  snippets Snippet[]
}

model Snippet {
  id             String    @id @default(cuid())
  title          String
  code           String
  language       String
  userId         String
  user           User      @relation(fields: [userId], references: [id])

  isPublic       Boolean   @default(false)
  tags           String[]
  deletedAt      DateTime?

  // ðŸ‘‡ contador simple que el API incrementa en cada update
  snippetVersion Int       @default(1)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}
